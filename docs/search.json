[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog woop"
  },
  {
    "objectID": "Implementing Perceptron/Implementing_perceptron.html",
    "href": "Implementing Perceptron/Implementing_perceptron.html",
    "title": "Perceptron",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom Perceptron import Perceptron\n\nfrom sklearn.datasets import make_blobs\n\nnp.random.seed(12345)\n\nn = 100\np_features = 2\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-2, -2), (2, 2)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\n\"\"\"\nExperiment 1\n\nUsing 2d data like the data in the example, if the data is linearly separable then the perceptron algorithm converges to weight vector w\ndescribing a separating line (provided that the maximum number of iterations is large enough). Please show visualizations of the data, the \nseparating line, and the evolution of the accuracy over training. It’s also fine for you to use the loss instead of the accuracy if you’d \nprefer.\n\"\"\"\n\nP = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP.fit(X_,y)\nprint(\"History of Accuracy \\n\" + str(P.history))\n\ndef draw_line(w, x_min, x_max):\n  x = np.linspace(x_min, x_max, 101)\n  y = -(w[0]*x + w[2])/w[1]\n  plt.plot(x, y, color = \"black\")\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(P.w, -2, 2)\n\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\nHistory of Accuracy \n[0.75, 0.75, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.78, 0.78, 0.78, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.83, 0.86, 0.86, 0.87, 0.89, 0.9, 0.91, 0.91, 0.91, 0.91, 0.91, 0.91, 0.93, 0.94, 0.94, 0.94, 0.94, 0.94, 0.94, 0.95, 0.95, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.97, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1.0]\n\n\n\n\n\n\n\"\"\"\nExperiment 2\n\nFor 2d data, when the data is not linearly separable, the perceptron algorithm will not settle on a final value of w\n, but will instead run until the maximum number of iterations is reached, without achieving perfect accuracy.\nPlease show visualizations of the data, the line in the final iteration, and the evolution of the score over training.\n\"\"\"\n\nn = 100\np_features = 2\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\nP_2 = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP_2.fit(X_,y)\nprint(\"History of Accuracy \\n\" + str(P_2.history))\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(P_2.w, -2, 2)\n\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\nHistory of Accuracy \n[0.59, 0.59, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.62, 0.62, 0.62, 0.58, 0.58, 0.58, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.58, 0.58, 0.56, 0.56, 0.6, 0.6, 0.59, 0.59, 0.59, 0.59, 0.59, 0.59, 0.59, 0.59, 0.58, 0.58, 0.58, 0.58, 0.58, 0.59, 0.59, 0.58, 0.58, 0.59, 0.59, 0.59, 0.58, 0.6, 0.6, 0.6, 0.6, 0.6, 0.62, 0.62, 0.62, 0.62, 0.62, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.65, 0.65, 0.65, 0.65, 0.65, 0.66, 0.66, 0.65, 0.66, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.69, 0.69, 0.68, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.71, 0.71, 0.72, 0.71, 0.71, 0.71, 0.71, 0.71, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.72, 0.73, 0.72, 0.72, 0.72, 0.72, 0.72, 0.72, 0.7, 0.7, 0.7, 0.7, 0.7, 0.71, 0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.7, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.7, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.68, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.66, 0.65, 0.65, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.67, 0.67, 0.67, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.66, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67, 0.66, 0.66, 0.66, 0.66, 0.66, 0.66, 0.64, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.65, 0.65, 0.64, 0.64, 0.65, 0.64, 0.63, 0.63, 0.63, 0.63, 0.64, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.62, 0.62, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.66, 0.65, 0.66, 0.66, 0.66, 0.66, 0.66, 0.65, 0.64, 0.66, 0.64, 0.64, 0.64, 0.66, 0.65, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.64, 0.63, 0.63, 0.63, 0.65, 0.65, 0.63, 0.65, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.63, 0.64, 0.63, 0.63, 0.64, 0.64, 0.65, 0.65, 0.64, 0.64, 0.63, 0.65, 0.65, 0.65, 0.65, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.63, 0.63, 0.64, 0.65, 0.65, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.62, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.62, 0.63, 0.62, 0.61, 0.62, 0.61, 0.61, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.63, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.64, 0.63]\n\n\n\n\n\n\n\"\"\"\nExperiment 3\n\nThe perceptron algorithm is also able to work in more than 2 dimensions! Show an example of running your algorithm on data with at least 5 features. \nYou don’t need to visualize the data or the separating line, but you should still show the evolution of the score over the training period. \nInclude a comment on whether you believe that the data is linearly separable based on your observation of the score.\n\"\"\"\n\nn = 100\np_features = 10\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nP_3 = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP_3.fit(X_,y)\nprint(\"History of Accuracy \\n\" + str(P_3.history))\n\nHistory of Accuracy \n
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "Classifying Penguins\n\n\n\n\n\n\nMay 10, 2023\n\n\nMead Gyawu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning From Dr. Timnit Gebru\n\n\n\n\n\n\nApr 19, 2023\n\n\nMead Gyawu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOptimizing Logistic Regression\n\n\n\n\n\n\nApr 17, 2023\n\n\nMead Gyawu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImplementation of Perceptron Algorithm\n\n\n\n\n\n\nMar 9, 2023\n\n\nMead Gyawu\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nAn example blog post illustrating the key techniques you’ll need to demonstrate your learning in CSCI 0451.\n\n\n\n\n\n\nJan 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/example-blog-post/index.html",
    "href": "posts/example-blog-post/index.html",
    "title": "Hello Blog",
    "section": "",
    "text": "This is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/example-blog-post/index.html#math",
    "href": "posts/example-blog-post/index.html#math",
    "title": "Hello Blog",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/LogisticRegression/Optimizing_logisitcregression.html",
    "href": "posts/LogisticRegression/Optimizing_logisitcregression.html",
    "title": "Logistic Regression",
    "section": "",
    "text": "Seeing Logistic Regression in Action\n\nfrom LogisticRegression import LogisticRegression\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import pyplot as plt\nimport numpy as np\nnp.seterr(all='ignore') \n\n# make the data\np_features = 3\nX, y = make_blobs(n_samples = 200, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\nPerforming Logistic Regression with gradient descent\nHere is an example of optimizing logisitc regression with gradient descent:\n\ndef draw_line(w, x_min, x_max):\n  x = np.linspace(x_min, x_max, 101)\n  y = -(w[0]*x + w[2])/w[1]\n  plt.plot(x, y, color = \"black\")\n\n# fit the model\nLR = LogisticRegression()\nLR.fit(X, y, alpha = 1, max_epochs = 10000)\n\n# inspect the fitted value of w\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(LR.w, -2, 2)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\nHere is a graph of the change in loss calculated:\n\nfig = plt.plot(LR.loss_history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Loss\")\n\n\n\n\nHere is a graph of the change in loss calculated when using stochastic gradient descent:\n\n# fit the model\n\nLR_sto = LogisticRegression()\nLR_sto.fit_stochastic(X, y, alpha = 0.01, max_epochs = 10000)\n\n\nfig = plt.plot(LR_sto.loss_history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Loss\")\n\n\n\n\nHere is a graph comparing the evolution of loss for both gradient descent and stochastic gradient descent:\n\nLR = LogisticRegression()\nLR.fit_stochastic(X, y, \n                  max_epochs = 100,  \n                  batch_size = 10, \n                  alpha = .05) \n\nnum_steps = len(LR.loss_history)\nplt.plot(np.arange(num_steps) + 1, LR.loss_history, label = \"stochastic gradient descent\")\n\n\nLR = LogisticRegression()\nLR.fit(X, y, alpha = .05, max_epochs = 100)\n\nnum_steps = len(LR.loss_history)\nplt.plot(np.arange(num_steps) + 1, LR.loss_history, label = \"gradient descent\")\n\nplt.loglog()\n\nlegend = plt.legend() \n\n\n\n\n\n\n\nExperiments\n\nExperiment 1\nThe purpose of this experiment is to determine if there is a learning rate too high for the model to converge to a minimizer. As a result, I performed logistic regression on the data with varying values for the learning rate. I then plotted all of these models’ score history to determine if the models actually do converge to a minimizer.\n\n\"\"\"\nA case in which gradient descent does not converge to a minimizer because the learning rate \nalpha is too large.\n\"\"\"\nLR1 = 0\na = 0.1\n\nwhile a < 1000000:\n    LR1 = LogisticRegression()\n    LR1.fit(X, y, alpha = a, max_epochs=1000)\n\n    num_steps = len(LR1.loss_history)\n    plt.plot(np.arange(num_steps) + 1, LR1.score_history, label = \"alpha = \"+str(a))\n\n    a *= 100\n\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Score\")\nplt.legend()\n\n<matplotlib.legend.Legend at 0x2ac42757970>\n\n\n\n\n\n\n\nConclusion to Experiment 1\nThis graph shows that with a learning rate of 100,000, the model fails to converge.\n\n\nExperiment 2\nThe purpose of this experiment is to determine how the size of the batches in stocastic gradient descent affects how quickly the algorithm converges. In order to do this, we ran the algorithm with varying batch sizes and compared how long it takes for the algorithm to converge.\n\nLR = 0\nbatch = 100\n\nwhile batch < 400:\n    LR = LogisticRegression()\n    LR.fit_stochastic(X, y, \n                    max_epochs = 1000,  \n                    batch_size = batch, \n                    alpha = .05) \n\n    num_steps = len(LR.score_history)\n    plt.plot(np.arange(num_steps) + 1, LR.score_history, label = \"batch size: \"+str(batch))\n    batch += 100\n\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Score\")\nplt.legend()\n\n'\\nLR = LogisticRegression()\\nLR.fit_stochastic(X, y, \\n                  max_epochs = 1000,  \\n                  batch_size = 100, \\n                  alpha = .05) \\n\\nnum_steps = len(LR.score_history)\\nplt.plot(np.arange(num_steps) + 1, LR.score_history, label = \"batch size: 100\")\\n\\nLR = LogisticRegression()\\nLR.fit_stochastic(X, y, \\n                  max_epochs = 1000,  \\n                  batch_size = 200, \\n                  alpha = .05) \\n\\nnum_steps = len(LR.score_history)\\nplt.plot(np.arange(num_steps) + 1, LR.score_history, label = \"batch size: 200\")\\n\\nLR = LogisticRegression()\\nLR.fit_stochastic(X, y, \\n                  max_epochs = 1000,  \\n                  batch_size = 300, \\n                  alpha = .05) \\n\\nnum_steps = len(LR.score_history)\\nplt.plot(np.arange(num_steps) + 1, LR.score_history, label = \"batch size: 300\")\\n\\nxlab = plt.xlabel(\"Iteration\")\\nylab = plt.ylabel(\"Score\")\\nplt.legend()\\n'\n\n\n\n\n\n\n\nConclusion to Experiment 2\nThe greater the size of each batch, the longer it takes for the algorithm to converge."
  },
  {
    "objectID": "posts/Penguins/ClassifyingPenguins.html",
    "href": "posts/Penguins/ClassifyingPenguins.html",
    "title": "Classifying Penguins",
    "section": "",
    "text": "Visualizing Decision Regions\nHere is a visualization of the decision regions for the 3 species of penguins based on the features I have chosen.\n\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib.patches import Patch\nimport numpy as np\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n          X.columns[0] : XX,\n          X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Adelie\", \"Chinstrap\", \"Gentoo\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\nplot_regions(tree, X_test[new_cols], y_test)"
  },
  {
    "objectID": "posts/Perceptron/Implementing_perceptron.html",
    "href": "posts/Perceptron/Implementing_perceptron.html",
    "title": "Perceptron",
    "section": "",
    "text": "Plotting A Set of Points\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom Perceptron import Perceptron\n\nfrom sklearn.datasets import make_blobs\n\nnp.random.seed(12345)\n\nn = 100\np_features = 2\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-2, -2), (2, 2)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\n\nExperiments\n\n\n\n\nExperiment 1\nData is linearly separable then the perceptron algorithm converges to weight vector w describing a separating line. As more predicted labels created by Perceptron matches the actual labels, then the accuracy score given to the labels increases, and reaches a score of 1 (100%) when the predicted labels completely match the actual labels. Using my implementation of Perceptron, here is how the algorithm works on linearly separable data.\n\nP = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP.fit(X_,y)\n#print(\"History of Accuracy \\n\" + str(P.history))\n\ndef draw_line(w, x_min, x_max):\n  x = np.linspace(x_min, x_max, 101)\n  y = -(w[0]*x + w[2])/w[1]\n  plt.plot(x, y, color = \"black\")\n\n#fig = plt.plot(P.history)\n#xlab = plt.xlabel(\"Iteration\")\n#ylab = plt.ylabel(\"Accuracy\")\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(P.w, -2, 2)\n\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\nChange In Accuracy Score\n\nfig = plt.plot(P.history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Accuracy\")\n\n\n\n\n\n\n\nExperiment 2\nFor 2d data, when the data is not linearly separable, the perceptron algorithm will not settle on a final value of w, but will instead run until the maximum number of iterations is reached, without achieving perfect accuracy.Here is how the perceptron algorithm would function on data that is not linearly separable.\n\nn = 100\np_features = 2\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\nP_2 = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP_2.fit(X_,y)\n#print(\"History of Accuracy \\n\" + str(P_2.history))\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(P_2.w, -2, 2)\n\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\nChange In Accuracy Score\n\nfig = plt.plot(P_2.history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Accuracy\")\n\n\n\n\n\n\n\nExperiment 3\nBecause the perceptron algorithm is not limited to 2 dimensions, I decided to run the perceptron algorithm on a data set with 10 features, judge the accuracy, and based on that determine if the data is linearly separable.\n\n\nn = 100\np_features = 10\n\nX, y = make_blobs(n_samples = 100, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nP_3 = Perceptron()\nX_ = np.append(X, np.ones((X.shape[0], 1)), 1)\nP_3.fit(X_,y)\n#print(\"History of Accuracy \\n\" + str(P_3.history))\nfig = plt.plot(P_3.history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Accuracy\")\n\n\n\n\nGiven the fact that the accuracy never reaches a score of 1.0, this data must not be linearly separable.\n\n\nRuntime Complexity\nUpdating the Perceptron algorithm is dependent on this equation:\n\\(w^{t+1}\\) = \\(w^{t}\\) + 1(yi <\\(w^{t}\\),xi> < 0)yixi\nCalculating <\\(w^{t}\\),xi> requires you to find the dot product of w(vector of weights) and x(the feature matrix). As a result we have a runtime of O(wx)."
  },
  {
    "objectID": "posts/TimnitGebru/LearningFromTimnitGebru.html",
    "href": "posts/TimnitGebru/LearningFromTimnitGebru.html",
    "title": "Learning From Dr. Timnit Gebru",
    "section": "",
    "text": "Gebru’s Talk Regarding Computer Vision\nDuring her talk, Dr. Gebru made emphasized the various issues and dangers present in the rollout and use of of computer vision. Initiall, facial recogniton technology released by major tech companies were extremely accurate when guessing the race and gender of White men, but were almost random in identifying Black women. This is the result of datasets that consistented mainly of or focused purely on male eurocentric features.\nShe highlighted the fact that because bias and intentionally flawed computer vision technology is often used by police, either to search for those with warrants or to find and arrest protestors, often times people have and will continue to be arrested by the police wrongfully. Given the fact that Black and hispanic populations are already disproportionately targeted, this will essentially become another tool in their oppression.\nThis goes te same for tools made to identify those who are transgendered or gay. Facial recognition technology that would classify those as gay or transgendered would be dangerous tools in the hands of those who seek to persecute them. Essentially, computer vision has already become a tool that furthers the discrimination that marginalized communities face.\n\n\nQuestion for Dr. Gebru\n\nThe knowledge and impacts of highly flawed facial recognition tools is public knowledge. However, companies like Google and Amazon refuse to publically acknowledge the harm that their algorithims can cause. What incentive or reason would these businesses have for releasing largely flawed tools?"
  }
]